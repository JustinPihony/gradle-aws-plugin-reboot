// -*- coding: utf-8; mode: groovy -*-

buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "com.diffplug.spotless:spotless-plugin-gradle:3.10.0"
		classpath "de.thetaphi:forbiddenapis:2.5"
		classpath "de.aaschmid:gradle-cpd-plugin:1.0"
		classpath "net.ltgt.gradle:gradle-errorprone-plugin:0.0.14"
		classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2"
		classpath "com.gradle.publish:plugin-publish-plugin:0.9.10"
	}
}

group = "jp.classmethod.aws"
ext.artifactId = "gradle-aws-plugin"

apply plugin: "java"
apply plugin: "jacoco"
apply plugin: "com.gradle.plugin-publish"

// gradle configuration
apply from: 'gradle/version.gradle'
apply from: 'gradle/resolveDependencies.gradle'

defaultTasks "clean", "build"

// ======== code quality ========
apply plugin: "checkstyle"
apply plugin: "findbugs"
apply plugin: "pmd"
apply plugin: "cpd"
apply plugin: "jacoco"
apply plugin: "de.thetaphi.forbiddenapis"
apply plugin: "com.diffplug.gradle.spotless"

// compiler
sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(AbstractCompile) each {
	it.options.encoding = "UTF-8"
}

compileJava {
options.compilerArgs << "-Werror"
	options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Xlint:-deprecation"
}

// jacoco
jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
	}
}

// checkstyle
checkstyle {
	toolVersion = "7.1.2"
	showViolations = true
	configFile = project.file('config/checkstyle/checkstyle.xml')
}
checkstyleTest {
	configFile = file("config/checkstyle/checkstyle-test.xml")
}

// workaround: see https://issues.gradle.org/browse/GRADLE-2888
task verifyNoCheckstyleWarningsInMain {
	group = "verification"
	description = "Fail if checkstyleMain result contains warnings"
	doLast {
		File warningsFile = file('build/reports/checkstyle/main.xml')
		if (warningsFile.exists() && warningsFile.text.contains("<error ")) {
			throw new GradleException("There were checkstyle warnings! For more info check $warningsFile")
		}
	}
}
checkstyleMain.finalizedBy verifyNoCheckstyleWarningsInMain
task verifyNoCheckstyleWarningsInTest {
	group = "verification"
	description = "Fail if checkstyleTest result contains warnings"
	doLast {
		File warningsFile = file('build/reports/checkstyle/test.xml')
		if (warningsFile.exists() && warningsFile.text.contains("<error ")) {
			throw new GradleException("There were checkstyle warnings! For more info check $warningsFile")
		}
	}
}
checkstyleTest.finalizedBy verifyNoCheckstyleWarningsInTest

// findbugs
findbugs {
	toolVersion = "3.0.1"
	effort = "max"
	includeFilter = file("config/findbugs/includeFilter.xml")
	excludeFilter = file("config/findbugs/excludeFilter.xml")
}
tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

// pmd
pmd {
	consoleOutput = true
	toolVersion = '5.5.2'
}
pmdMain {
	ruleSetFiles = files("config/pmd/pmd-settings.xml")
	ruleSets = []  // To apply only the custom rules
}
pmdTest {
	ruleSetFiles = files("config/pmd/pmd-settings-test.xml")
	ruleSets = []  // To apply only the custom rules
}
cpdCheck {
	reports {
		text.enabled = true
		xml.enabled = false
	}
	source = sourceSets.main.allJava // only main source
	ignoreFailures = true
}

// forbiddenapis
forbiddenApisMain {
	bundledSignatures += [
		'jdk-system-out',
		'jdk-unsafe-' + project.sourceCompatibility,
		'jdk-internal-' + project.sourceCompatibility
	]
	signaturesFiles = fileTree(dir: "config/forbiddenapis", include: "*.txt")
	ignoreFailures = false
}
forbiddenApisTest {
	bundledSignatures += [
		'jdk-system-out',
		'jdk-internal-' + project.sourceCompatibility
	]
	signaturesFiles = fileTree(dir: "config/forbiddenapis-test", include: "*.txt")
	ignoreFailures = false
}

// spotless
spotless {
	java {
		licenseHeaderFile 'config/spotless/spotless.license.java'
		importOrderFile   'config/spotless/spotless.importorder'
		eclipse().configFile 'config/spotless/spotless.eclipseformat.xml'

		// Eclipse formatter screws up long literals with underscores inside of annotations (see issue #14)
		//    @Max(value = 9_999_999 L) // what Eclipse does
		//    @Max(value = 9_999_999L)  // what I wish Eclipse did
		custom 'Long literal fix', { it.replaceAll('([0-9_]+) [Ll]', '$1L') }

		// Eclipse formatter puts excess whitespace after lambda blocks
		//    funcThatTakesLambdas(x -> {} , y -> {} )	// what Eclipse does
		//    funcThatTakesLambdas(x -> {}, y -> {})	// what I wish Eclipse did
		custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }

		indentWithTabs()
		endWithNewline()

		replaceRegex 'Add space before comment asterisk', '^(\\t*)\\*', '$1 *'
//		customReplaceRegex 'Remove indent before line comment', '^\\t*//', '//'
	}
}

// ======== create source and javadoc bundles ========

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

javadoc {
	failOnError = false
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

configurations {
	deployerJars
}

// ======== libraries ========
repositories {
	jcenter()
	mavenCentral()
}

dependencies {
	compile gradleApi()
	compile "com.google.guava:guava:$guavaVersion"
	compile "commons-io:commons-io:1.4"
	compileOnly "org.projectlombok:lombok:$lombokVersion"

	compile "com.amazonaws:aws-java-sdk-sts:$awsJavaSdkVersion"
	compile "com.amazonaws:aws-java-sdk-s3:$awsJavaSdkVersion"
	compile "com.amazonaws:aws-java-sdk-ec2:$awsJavaSdkVersion"
	compile "com.amazonaws:aws-java-sdk-rds:$awsJavaSdkVersion"
	compile "com.amazonaws:aws-java-sdk-route53:$awsJavaSdkVersion"
	compile "com.amazonaws:aws-java-sdk-elasticloadbalancing:$awsJavaSdkVersion"
	compile "com.amazonaws:aws-java-sdk-elasticbeanstalk:$awsJavaSdkVersion"
	compile "com.amazonaws:aws-java-sdk-cloudformation:$awsJavaSdkVersion"
	compile "com.amazonaws:aws-java-sdk-lambda:$awsJavaSdkVersion"
	compile "com.amazonaws:aws-java-sdk-iam:$awsJavaSdkVersion"
	compile "com.amazonaws:aws-java-sdk-sqs:$awsJavaSdkVersion"
	compile "com.amazonaws:aws-java-sdk-sns:$awsJavaSdkVersion"
	compile "com.amazonaws:aws-java-sdk-ecr:$awsJavaSdkVersion"
	compile "com.amazonaws:aws-java-sdk-ssm:$awsJavaSdkVersion"
	compile "com.amazonaws:aws-java-sdk-cloudwatch:$awsJavaSdkVersion"

	// tests
	testCompile "junit:junit:$junitVersion"
	testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
	testCompile "org.mockito:mockito-core:$mockitoCoreVersion"

	deployerJars "org.springframework.build:aws-maven:4.7.0.RELEASE"
}

// ======== deploy artifacts ========
// Allows forks of the plugin to define their own deployment mechanisms
// in separate files named according to their maven group name
apply from: "deploy/${group}.gradle"

// ======== wrapper ========
task wrapper(type: Wrapper) {
	gradleVersion = "4.6"
}
