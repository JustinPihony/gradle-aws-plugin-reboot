// -*- coding: utf-8; mode: groovy -*-

buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.1.RELEASE"
		classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
	}
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: "jp.classmethod.aws.s3"
apply plugin: "jp.classmethod.aws.cloudformation"

// ==== Project settings

group = 'jp.classmethod.aws.gradle.sample'
version = '0.1-SNAPSHOT'
ext.artifactId = '06-cloudformation'

ext.timestamp = new Date().format("yyyyMMdd'_'HHmmss", TimeZone.default)
ext.versionDesc = "${version}-${timestamp}"

ext.defaultEncoding = 'UTF-8'
sourceCompatibility = targetCompatibility = 1.8
tasks.withType(AbstractCompile) each {
	it.options.encoding = ext.defaultEncoding
}
repositories {
	mavenCentral()
	maven { url 'http://repo.spring.io/release' }
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-actuator"
	compile "org.springframework.boot:spring-boot-starter-web"
	compile "org.apache.tomcat.embed:tomcat-embed-jasper"
	compile "javax.servlet:jstl"
}


// ==== AWS settings

aws {
	profileName = "default"
	region = "ap-northeast-1"
}

cloudFormation {
	final String STACK_PARAMS_PREFIX = 'barista.aws.cfn.stackParams.'
	
	templateFile project.file('src/main/cloudformation/06-cloudformation.template')
	templateBucket "cf-templates-1r72h3gknbax2-${aws.region}"
	templateKeyPrefix "06-cloudformation"
	stackPolicyFile project.file('src/main/cloudformation/stackpolicy.json')
	stackPolicyBucket "cf-templates-1r72h3gknbax2-${aws.region}"
	stackPolicyKeyPrefix "06-cloudformation"
	stackName "gradlecfn"
	conventionMapping.stackParams = {
		def stackParams
		def stack = cloudFormation.getStack()
		if (stack.isPresent()) {
			// existing parameter values
			stackParams = cloudFormation.toMap(stack.get().parameters)
		} else {
			assert project.uploadBundle.didWork
			// default values
			stackParams = [
				KeyName: "sample-key",
				EnvironmentType: "local"
			]
		}
		if (project.uploadBundle.didWork) {
			stackParams["AppVersionLabel"] = project.uploadBundle.versionDesc
		}
		return stackParams
	}
	stackTags << [MyTag: 'myValue']
	capabilityIam true
}

//==== Other tasks

task createDockerfile(type: Copy, dependsOn: jar) {
	from "src/main/bundle/Dockerfile"
	into "build/bundle"
	expand(jarFilename: jar.archiveName, artifactId: project.artifactId)
}

task createBundleResources(type: Copy) {
	from "src/main/bundle"
	into "build/bundle"
	exclude "src/main/bundle/Dockerfile"
}

task createBundle(type: Zip, dependsOn: [createDockerfile, createBundleResources, bootRepackage]) {
	archiveName = jar.archiveName.substring(0, jar.archiveName.length() - 4) + ".zip"
	from "build/bundle"
	from jar.archivePath
}

task uploadBundle(type: jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask, dependsOn: createBundle) {
	group "AWS"
	description "Upload ${artifactId} application bundle file to S3."
	
	ext.versionDesc = "${version}-${timestamp}"
	bucketName "elasticbeanstalk-${aws.region}-${aws.accountId}"
	key "eb-apps/${artifactId}/${artifactId}-${versionDesc}.zip"
	file project.createBundle.archivePath
	overwrite project.version.endsWith("-SNAPSHOT")
}

task awsFullDeploy(dependsOn: [
	uploadBundle,
	awsCfnUploadTemplate,
	awsCfnMigrateStackAndWaitCompleted
]) {
	group 'AWS'
	description 'Deploys full-stack ${artifactId} environment to AWS'
}

task awsFullUndeploy(dependsOn: awsCfnDeleteStackAndWaitCompleted) {
	group 'AWS'
	description 'Undeploys full-stack ${artifactId} environment on AWS'
}

awsCfnMigrateStack.mustRunAfter uploadBundle
awsCfnMigrateStack.dependsOn awsCfnUploadTemplate
awsCfnMigrateStack.dependsOn awsCfnUploadStackPolicy
awsCfnWaitStackComplete.loopTimeout = 10800 // = 3hr
awsCfnWaitStackDeleted.loopTimeout = 10800 // = 3hr
